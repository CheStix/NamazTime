import telebot
from telebot import types
from flask import Flask, request
from datetime import datetime

from map_api import get_location
from namaz_api import get_namaz, get_next
import service as s
import markups as m
import config
import db


def listener(messages):
    for message in messages:
        print(message.json)


user_find_city = dict()  # –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
URL = 'https://cheel.pythonanywhere.com/' + config.SECRET
bot = telebot.TeleBot(config.BOT_TOKEN, skip_pending=True, threaded=False)
bot.set_update_listener(listener)
bot.remove_webhook()
bot.set_webhook(url=URL)

app = Flask(__name__)

@app.route('/'+config.SECRET, methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return 'ok', 200


@bot.message_handler(commands=['start', 'help'])
def start(message: types.Message):
    # —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    markup = m.get_main_markup()
    city = db.get_user_city(message.chat.id)  # –ø–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞(name, lat, lon)
    msg_text = s.get_text_main(message.chat.username, city[0].split(",")[0])
    bot.send_message(message.chat.id, text=msg_text, parse_mode='html', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text.split(' ')[0] == 'üïå' or message.text.split(' ')[0] == 'üïã',
                     content_types=['text'])
def day_handler(message: types.Message):
    # –≤—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–º–∞–∑–∞–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    markup = m.get_main_markup()
    city = db.get_user_city(message.chat.id)
    timestamp = message.date
    if message.text.split(' ')[0] == 'üïã':
        timestamp += 24*60*60
    date = datetime.fromtimestamp(timestamp).strftime('%d-%m-%Y')
    timings = get_namaz(date, city[1], city[2])
    msg_text = s.get_text_day(city[0].split(",")[0], date, timings)
    bot.send_message(message.chat.id, text=msg_text, parse_mode='html', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üåç –ú–µ—Å—Ç–æ', content_types=['text'])
def city_handler(message: types.Message):
    # —Å–º–µ–Ω–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
    markup = types.ReplyKeyboardRemove()
    msg = bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞",
                           reply_markup=markup)
    # —É–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (def ask_place) –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.register_next_step_handler(msg, ask_place)


def ask_place(message):
    global user_find_city
    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞–ø—Ä–æ—Å—É –≤–∞—Ä–∏–∞–Ω—Ç
    chat_id = message.chat.id
    text = message.text
    # –ø–æ–∏—Å–∫ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
    location = get_location(text)
    if location is None:  # –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–∏
        msg = bot.send_message(chat_id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∞, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ'
                                        ' –≤–≤–µ—Å—Ç–∏ –±–ª–∏–∂–∞–π—â–∏–π –∫—Ä—É–ø–Ω—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç')
        bot.register_next_step_handler(msg, ask_place)  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
        return
    if not location:  # –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
        msg = bot.send_message(chat_id, '–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n '
                                        '–°–ø–∞—Å–∏–±–æ')
        bot.register_next_step_handler(msg, ask_place)  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
        return
    if len(location) != 1:  # –Ω–∞–π–¥–µ–Ω–∞ –±–æ–ª—å—à–µ —á–µ–º –æ–¥–Ω–∞ –ª–æ–∫–∞—Ü–∏—è
        msg = bot.send_message(chat_id, '–ù–∞–π–¥–µ–Ω–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, '
                                        '–Ω–∞–ø—Ä–∏–º–µ—Ä —É–∫–∞–∑–∞–≤ –æ–±–ª–∞—Å—Ç—å –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É')
        bot.register_next_step_handler(msg, ask_place)  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
        return

    markup = m.city_confirm_dialog()

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–µ —Ç–∞–º –Ω–µ—Ç
    db.write_city((location[0]['display_name'], float(location[0]['lat']), float(location[0]['lon'])))
    # –ø–æ–ª—É—á–∞–µ–º id –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏—Å–≤–∞–µ–≤–∞–µ–º –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    city_id = db.get_city_id_by_name(location[0]['display_name'])
    user_find_city[chat_id] = city_id
    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–µ—Ä–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –∏–ª–∏ –Ω–µ—Ç
    bot.send_message(chat_id, location[0]['display_name'], reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'yes_city')
def yes_city_inline(call):
    """–µ—Å–ª–∏ –º–µ—Å—Ç–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞ –≤–µ—Ä–Ω–æ"""
    chat_id = call.message.chat.id
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏ –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
    db.set_user_city(chat_id, int(user_find_city[chat_id]))
    user_find_city.pop(chat_id, None)

    city = db.get_user_city(chat_id)
    msg_text = f'{call.message.chat.username}, –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ –∫–∞–∫ {city[0].split(",")[0]}'

    bot.edit_message_text(chat_id=chat_id, message_id=call.message.message_id,
                          text=msg_text)
    start(call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'no_city')
def no_city_inline(call):
    """–µ—Å–ª–∏ –Ω–µ —Ç–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç—å, –∑–∞–ø—É—Å–∫–∞–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ–∏—Å–∫ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏"""
    # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id,)
    # –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    user_find_city.pop(call.message.chat.id, None)
    # –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
    city_handler(call.message)


@bot.message_handler(func=lambda message: message.text == '‚è∞ –°–ª–µ–¥—É—é—â–∏–π')
def next_handler(message: types.Message):
    """–≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–º–∞–∑–∞"""
    markup = m.get_main_markup()
    city = db.get_user_city(message.chat.id)
    timestamp = message.date
    namaz = get_next(timestamp, city[1], city[2])
    msg_text = s.get_text_next(city[0].split(",")[0], namaz)
    bot.send_message(message.chat.id, text=msg_text, parse_mode='html', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üìÜ –ù–∞ –¥–∞—Ç—É', content_types=['text'])
def date_handler(message: types.Message):
    """–≤—Ä–µ–º—è –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É"""
    markup = types.ReplyKeyboardRemove()
    msg_text = s.get_text_date()
    msg = bot.send_message(message.chat.id, text=msg_text, parse_mode='html', reply_markup=markup)
    # —É–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (def ask_date) –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞—Ç—ã
    bot.register_next_step_handler(msg, ask_date)


def ask_date(message):
    markup = m.get_main_markup()
    chat_id = message.chat.id
    text = message.text
    city = db.get_user_city(chat_id)
    try:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        valid_date = datetime.strptime(text, '%d.%m.%Y')
    except ValueError:
        bot.send_message(chat_id, text='–î–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ', reply_markup=markup)
        return
    else:
        date = valid_date.strftime('%d-%m-%Y')
        timings = get_namaz(date, city[1], city[2])
        msg_text = s.get_text_day(city[0].split(",")[0], date, timings)
        bot.send_message(message.chat.id, text=msg_text, parse_mode='html', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '‚ÅâÔ∏è–ü–æ–º–æ—â—å', content_types=['text'])
def help_handler(message: types.Message):
    start(message)


#TODO –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞
#TODO –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–º–∞–∑–∞, –Ω–µ –≤–µ—Ä–Ω–æ –∏–∑ –∑–∞ timezone
