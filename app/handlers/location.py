from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

from .common import cmd_start_help
from ..keyboards.markups import city_confirm_dialog, get_main_markup
from ..services import db
from ..services.map_api import get_loc_geocode, get_loc_timezone

MAIN_MARKUP = get_main_markup()


class SetLocation(StatesGroup):
    waiting_loc_name = State()
    confirm_loc_name = State()


async def location_start(message: Message):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=ReplyKeyboardRemove())
    await SetLocation.waiting_loc_name.set()


async def location_search(message: Message, state: FSMContext):
    response = await get_loc_geocode(message.text)
    # –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–∏
    if response['status'] is None:
        msg = '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—É–Ω–∫—Ç–∞, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ ' \
              '–≤–≤–µ—Å—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –∫—Ä—É–ø–Ω—ã–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç'
        await message.answer(msg)
        return
    # –Ω–∞–π–¥–µ–Ω–∞ –±–æ–ª—å—à–µ —á–µ–º –æ–¥–Ω–∞ –ª–æ–∫–∞—Ü–∏—è
    elif response['status'] == 'Multiple':
        msg = '–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —É—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, ' \
              '–Ω–∞–ø—Ä–∏–º–µ—Ä —É–∫–∞–∑–∞–≤ –æ–±–ª–∞—Å—Ç—å –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É'
        await message.answer(msg)
        return
    # –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
    elif response['status'] == 'Error':
        msg = '–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n ' \
              '–°–ø–∞—Å–∏–±–æ'
        await message.answer(msg)
        return

    markup = city_confirm_dialog()
    await state.update_data(response)
    await message.answer(response['display_name'], reply_markup=markup)
    await SetLocation.confirm_loc_name.set()


async def location_confirm(call: CallbackQuery, state: FSMContext):
    answer = call.data.split('_')[0]
    if answer == 'no':
        msg = '–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞'
        await call.message.edit_text(msg)
        await SetLocation.waiting_loc_name.set()
    if answer == 'yes':
        location = await state.get_data()
        lat = float(location['lat'])
        lon = float(location['lon'])
        timezone = await get_loc_timezone(lat, lon)  #TODO –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å False
        await db.write_city(location['display_name'], lat, lon, timezone)
        city_id = await db.get_city_id_by_name(location['display_name'])
        await db.set_user_city(call.message.chat.id, city_id)
        msg = f'{call.message.chat.username}, –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ –∫–∞–∫ ' \
              f'{location["display_name"].split(",")[0]}'
        await call.message.edit_text(msg)
        await cmd_start_help(call.message, state)
    await call.answer()


def register_handlers_location(dp: Dispatcher):
    dp.register_message_handler(location_start, Text(startswith='üåç'), state='*')
    dp.register_message_handler(location_search, state=SetLocation.waiting_loc_name)
    dp.register_callback_query_handler(location_confirm, Text(endswith='city'), state=SetLocation.confirm_loc_name)
